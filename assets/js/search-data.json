{
  
    
        "post0": {
            "title": "Отговори на Някои Аргументи против КОВИД--ваксините",
            "content": "Ако на човек аргумента му е &#39;единствените валидни експерименти изискват време&#39;, нищо не може да се каже за по-кратко време, да. Но принципно почти никога чрез данни не може да се докаже липса на връзка нещо (виж за Попър и фалсификацията), само може вероятността за това при дадени предположения да става пренебрежимо ниска. . Малко ми напонмня на един стар виц: . &#39; -Каква е вероятността да срещна Т-рекс на улицата?&#39; &#39; 50-50- или ще го срещна, или няма.&#39; ⁠ . Т.е. аз не съм сигурен какви са вероятностите, така че ще кажа 1/2 и ще взема &#39;Соломоновско&#39; решение да не правя нищо. Тук играят поне 2 когнитивни склонности: . &#39;Да се предструваме, че сме мъдри&#39;. Свързано е с това, че когато става въпрос за избор дали да направим нещо или да оставим нещата да поемат по нормалният си поток, коато има плюсове и минуси и от двете страни, решаваме да не правим нищо. Вижте и (&#39;науката за тролеите&#39;)[https://en.wikipedia.org/wiki/Trolley_problem]. | Богът на пролуките. В случаят не става въпрос за Бог като такъв, а за това, че не претегляме безпристрастно аргументите в посока на априорното си мнение, а постоянно търсим пролука, колкото и малка да е тя. Трябва да се знае, че никога няма абсолютна сигурност за нищо. Напримерн Нютоновата механика, която сме учили за пръв път в 6ти клас не може да обясни дадени Квантово-механични ефекти (и от друга страна, космологични), но е достатъчно добра, за да стигнем до Марс. | Повече по въпроса защо повечето улики сочат в посока на това, че дългосрочните ефекти от иРНК ваксините изглеждат несъществуващи: . ⁠ Та, ето някои сведения за липса на дългосрочни проблеми: . В изследванията за лекарства има няколко стадия: а. Изследване на възможни ефекти от първи принципи, т.е. физикохимия или биохимия. Тук се търси за възможен механизъм нещо да работи (напр иРНК молекулата да направи беля). б. Изследване със симулации. в. Изследване в &#39;проста среда&#39;, напр в епруветка, в мая и тн г. Изследване в-у &#39;прости&#39; бозайници, обикновено мишки д.-... Изследвания в-у по-сложни бозайници, хора, дългосрочни наблюдения и тн. е- дългосрочни изследвания и тн. ⁠ Във всеки от горните стадии може да излезе причина за притеснение и нещо, се прекратява и поправя. | За всяка ваксина до момента всички фази горе са преминати. И сега проблема е &#39;ама какво е неопределеното нещо, което става след години и няма причини от 1ви принципи за него?&#39; . God of the gaps much? Иначе казано, ако си помислиш честно, прилагаш ли еднаква критичност към уликите в подкрепа на &#39;скептичната&#39; си позиция и уликите в обратната посока ⁠ btw за иРНК аргумента от първи принципи стои горе-долу така: иРНК молекулите са изключително нестабилни и се разпадат като ги погледне някой накриво.(тук е грубо описано как работи https://www.cdc.gov/.../COVID-19-mRNA-infographic_G_508.pdf). Така че липидната обвивка им трябва, за да се закачат за някои клетки, но след кратко време те се разпадат и престават да произвеждат шиповете. Ако има проблем с шип-протеините ще има проблем и с ковид, който ги произвежда с милиарди пъти повече. иРНК-то от ваксините се разпада до дни максиум. Това е лаишкото ми разбиране за това &#39;защо да не сме внимателни и да мислим, че има дългосрочни проблеми&#39;. Тоест, единственото нещо, за което има причина да е токсично в тази ваксината е тоя шип-белтък, който получаваш в 10^9х доза от ковид. . | Не е известна ваксина с дълготряйни ефекти, които ЗАПОЧВАТ да се проявяват след повече от 2 месеца. Вероятно причината свързана е горната, т.е. че това е биология и нещата работят по определени механизми и не е много лесно да намериш механизъм. https://www.historyofvaccines.org/.../vaccine-side... Ваксините се ползват от &gt;9 месеца . | ковид-ваксините са сложени на може би 3 милиарда души до момента. При такава извадка дори и на много редки ефекти (например тромбозите при АЗ) могат да се оценят добре статистически - този с тия тромбози беше 1/20000 случая. И там също откриха причина за ефект, който може да се предотврати чрез аспирация на иглата. Да речем, че мРНА ваксината предизвикваше някакво увеличение на хематологични заболявания- дори при силно забавен ефект, някакъв сигнал щеше да се види вече за това (дори от observational studies). . |",
            "url": "https://petrovs12.github.io/stats/covid-19/2021/09/10/%D0%90%D0%BC%D0%B0-%D0%9C%D0%BD%D0%BE%D0%B3%D0%BE-%D0%91%D1%8A%D1%80%D0%B7%D0%BE-%D0%9D%D0%B0%D0%BF%D1%80%D0%B0%D0%B2%D0%B8%D1%85%D0%B0-%D0%92%D0%B0%D0%BA%D1%81%D0%B8%D0%BD%D0%B8%D1%82%D0%B5.html",
            "relUrl": "/covid-19/2021/09/10/%D0%90%D0%BC%D0%B0-%D0%9C%D0%BD%D0%BE%D0%B3%D0%BE-%D0%91%D1%8A%D1%80%D0%B7%D0%BE-%D0%9D%D0%B0%D0%BF%D1%80%D0%B0%D0%B2%D0%B8%D1%85%D0%B0-%D0%92%D0%B0%D0%BA%D1%81%D0%B8%D0%BD%D0%B8%D1%82%D0%B5.html",
            "date": " • Sep 10, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Project_euler.jl",
            "content": "&lt;!DOCTYPE html&gt; . ⚡ Pluto.jl ⚡ . .",
            "url": "https://petrovs12.github.io/stats/2021/09/10/project_euler.jl.html",
            "relUrl": "/2021/09/10/project_euler.jl.html",
            "date": " • Sep 10, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Some JuMP Models",
            "content": "using Markdown using InteractiveUtils # begin # using Pkg;Pkg.add(&quot;Intervals&quot;) # end using JuMP, GLPK,LightGraphs using GraphPlot using DataFrames,DataFramesMeta,CSV, Dates using LinearAlgebra using Distributions using MetaGraphs using Colors . include(&quot;jump_utils.jl&quot;) g=LightGraphs.barabasi_albert(20,3) . {20, 51} undirected simple Int64 graph . m=vertexCover(g) optimize!(m) optimalVerticles=Dict((x-&gt;(x=&gt;value(x))).(JuMP.all_variables(m))) gplot(g,nodelabel=[value(JuMP.variable_by_name(m,&quot;x[$i]&quot;)) for i in vertices(g) ],) . 1.0 1.0 1.0 1.0 1.0 1.0 1.0 0.0 1.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 print(&quot;Test if things rebuild&quot;) . Test if things rebuild .",
            "url": "https://petrovs12.github.io/stats/2021/01/01/test-julia.html",
            "relUrl": "/2021/01/01/test-julia.html",
            "date": " • Jan 1, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://petrovs12.github.io/stats/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://petrovs12.github.io/stats/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "I’m Stefan Petrov, a Machine Learning Engineer, interested in cool applied problems. .",
          "url": "https://petrovs12.github.io/stats/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://petrovs12.github.io/stats/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}