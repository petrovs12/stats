### A Pluto.jl notebook ###
# v0.16.0

using Markdown
using InteractiveUtils

# ╔═╡ 9d2617c5-ebf2-46c8-910f-190ba1d160ac
using BenchmarkTools

# ╔═╡ 89196053-24db-4013-a1e3-3d3b22c4eedc
using Combinatorics

# ╔═╡ 27547863-22e1-466e-951e-2a5677bb9501
using IterTools

# ╔═╡ 568f057a-126d-11ec-23cb-f98bea4a534f
md"# Project Euler 1

If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.

"

# ╔═╡ daad198c-10c8-4e4c-93c4-d330ab22f3dd
naive1(x)=sum([i for i in 1:(x-1) if i%3==0 || i%5==0])

# ╔═╡ 2cca4797-d1ee-4c27-8243-736e3e468dd1
naive1(1000)

# ╔═╡ 6b82e993-2f3d-4d5c-8709-57050c7211de
sumRange(i,j) = (j-i+1)*(i+j)/2

# ╔═╡ 382a2b3a-4059-4cbe-8485-b0ecce99c451
sumRange(1,10)

# ╔═╡ e59e2718-acc6-4a98-8ec9-61cf0a375f90
md"We can also solve it with the inclusion-exclusion principle"

# ╔═╡ f7acd079-f79b-4967-a9ee-fc4965e2a06c
inclusionExclusionPrincipleProb1(n) = begin 
	k=n-1
	sumRange(1,floor(k/3))*3+sumRange(1,floor(k/5))*5-sumRange(1,floor(k/15))*15
end

# ╔═╡ c118a05d-d1bb-4767-9f3a-0b5cefd69d47
inclusionExclusionPrincipleProb1(1000)

# ╔═╡ 078cb436-e238-4a69-bde6-156624db601b
@benchmark sum(1:1000000)

# ╔═╡ cea0b9f0-b908-4c33-8a5d-6a3019cfa47a
@benchmark sumRange(1,1000000)

# ╔═╡ 07d10397-f053-45e0-ab2b-6565c18db5a2
@benchmark inclusionExclusionPrincipleProb1(10000)

# ╔═╡ 464e87db-a12f-4e8b-a03a-ae1f943a42d0
@benchmark naive1(10000)

# ╔═╡ e323b98a-47a7-4182-9892-4d0b1891e295
md" so we can see we have about $(6.380*10^(-6)/(0.021*10^(-9))) speed-up"

# ╔═╡ 82baf161-7a98-4bb5-a928-b2273e4360cb
md"We can also do it for a general problem with the inclusion- exclusion principle as follows:
"

# ╔═╡ c7667675-8018-40f5-a1d9-8756f29466e0
prod([1,2,3])

# ╔═╡ ed4ded6b-925a-46e7-bcab-0cf0dc0fe80a
inclusionExclusionSumUpTo(n,multiples) = begin
	k=n-1
	res = 0
	for comb in combinations(multiples)
		pcomb=prod(comb)
		res += (-1)^(length(comb)-1)* sumRange(1,floor(k/pcomb))*pcomb
	end
	res
end

# ╔═╡ fa4d516c-74ea-44cb-bc18-e2b6cde80515
inclusionExclusionSumUpTo(1000,[3,5])

# ╔═╡ 120de079-e8e5-40b3-9582-c3741cf024cb
@benchmark inclusionExclusionSumUpTo(100000,[3,5,7,11,13])

# ╔═╡ 6ea414f8-d5bb-4432-9afb-6d2b2cfd1d01
md"We can see it's pretty fast..."

# ╔═╡ 6d793a48-b48e-4547-ac87-c23a1b03de9c
md" # Problem 2
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

"

# ╔═╡ e0470dad-e1ab-4603-85d0-e165f80c2463
md"Copy some fibonacci channel code from [this blog post about lazy sequences](https://www.oxinabox.net/2017/11/18/Lazy-Sequences-in-Julia.html)"

# ╔═╡ c6a079d7-2773-41ba-81c8-773efaabd010
function fib_ch(buff=1)
    prev=0
    cur=1
    Channel(ctype=Int, csize=buff) do c
        while(true)
            put!(c, cur)
            prev, cur = (cur, prev+cur) # nice little avoiding a temp here
        end
    end
end

# ╔═╡ 61d320a0-2f4f-4cf4-b800-20bb77560c17


# ╔═╡ 2eb91ffc-799d-496e-8b50-6be2d497beaa
sum([x for x in collect(IterTools.takewhile(x->x<=4_000_000,fib_ch(100))) if x%2==0])

# ╔═╡ 5e201d20-3600-4b21-a764-8dd1e89cdf66
md" It's also quite fast!"

# ╔═╡ 6678078e-f30c-4e5e-8de5-f697d6c241fd
eulerProblem2WithLazySeq(limit)=sum([x for x in collect(IterTools.takewhile(x->x<=limit,fib_ch(100))) if x%2==0])

# ╔═╡ c2c72029-ffd2-463c-8548-bbe306178bd1
eulerProblem2WithLazySeq(4_000_000)

# ╔═╡ 77f86b91-0ac4-4ba4-a687-0ea49a0ddd10
@benchmark eulerProblem2WithLazySeq(4_000_000)

# ╔═╡ 314415de-ac90-479a-8665-fa9e51323740
@benchmark eulerProblem2WithLazySeq(1_000_000_000_000)

# ╔═╡ cea3d8d2-70e4-49c7-9698-d4085976e924
md"Let's figure out also how to solve some recurrent equations and do it like that

$a_n=a_{n-1}+a_{n-2}$

The characteristic equation of the generating function is

$x^2-x-1==0$, with roots

$x_1 = (1+√5)/2, x_2=(1-√5)/2$

Then we can search for a solution of the form $dx_1^n+ex_2^n$,
since then
$a_n-a_{n-1}-a_{n-2} = (dx_1^n+ex_2^n)-(dx_1^{n-1}+ex_2^{n-1})-(...) = dx_1^{n-2}(...=0)-ex_2^{n-2}(...=0)$
and setting $a_0 = 0, a_1=1$ and solving for 
$d,e$ we get eventually Binet's formula:

$ϕ = (\sqrt(5)+1)/2$
$a_n = (ϕ^n-((-ϕ)^{-n}))/√5$

"

# ╔═╡ fba39823-d264-4210-80c8-491eb19486d2


# ╔═╡ 00000000-0000-0000-0000-000000000001
PLUTO_PROJECT_TOML_CONTENTS = """
[deps]
BenchmarkTools = "6e4b80f9-dd63-53aa-95a3-0cdb28fa8baf"
Combinatorics = "861a8166-3701-5b0c-9a16-15d98fcdc6aa"
IterTools = "c8e1da08-722c-5040-9ed9-7db0dc04731e"

[compat]
BenchmarkTools = "~1.1.4"
Combinatorics = "~1.0.2"
IterTools = "~1.3.0"
"""

# ╔═╡ 00000000-0000-0000-0000-000000000002
PLUTO_MANIFEST_TOML_CONTENTS = """
# This file is machine-generated - editing it directly is not advised

julia_version = "1.7.0-beta3.0"
manifest_format = "2.0"

[[deps.Artifacts]]
uuid = "56f22d72-fd6d-98f1-02f0-08ddc0907c33"

[[deps.BenchmarkTools]]
deps = ["JSON", "Logging", "Printf", "Statistics", "UUIDs"]
git-tree-sha1 = "42ac5e523869a84eac9669eaceed9e4aa0e1587b"
uuid = "6e4b80f9-dd63-53aa-95a3-0cdb28fa8baf"
version = "1.1.4"

[[deps.Combinatorics]]
git-tree-sha1 = "08c8b6831dc00bfea825826be0bc8336fc369860"
uuid = "861a8166-3701-5b0c-9a16-15d98fcdc6aa"
version = "1.0.2"

[[deps.CompilerSupportLibraries_jll]]
deps = ["Artifacts", "Libdl"]
uuid = "e66e0078-7015-5450-92f7-15fbd957f2ae"

[[deps.Dates]]
deps = ["Printf"]
uuid = "ade2ca70-3891-5945-98fb-dc099432e06a"

[[deps.IterTools]]
git-tree-sha1 = "05110a2ab1fc5f932622ffea2a003221f4782c18"
uuid = "c8e1da08-722c-5040-9ed9-7db0dc04731e"
version = "1.3.0"

[[deps.JSON]]
deps = ["Dates", "Mmap", "Parsers", "Unicode"]
git-tree-sha1 = "8076680b162ada2a031f707ac7b4953e30667a37"
uuid = "682c06a0-de6a-54ab-a142-c8b1cf79cde6"
version = "0.21.2"

[[deps.Libdl]]
uuid = "8f399da3-3557-5675-b5ff-fb832c97cbdb"

[[deps.LinearAlgebra]]
deps = ["Libdl", "libblastrampoline_jll"]
uuid = "37e2e46d-f89d-539d-b4ee-838fcccc9c8e"

[[deps.Logging]]
uuid = "56ddb016-857b-54e1-b83d-db4d58db5568"

[[deps.Mmap]]
uuid = "a63ad114-7e13-5084-954f-fe012c677804"

[[deps.OpenBLAS_jll]]
deps = ["Artifacts", "CompilerSupportLibraries_jll", "Libdl"]
uuid = "4536629a-c528-5b80-bd46-f80d51c5b363"

[[deps.Parsers]]
deps = ["Dates"]
git-tree-sha1 = "438d35d2d95ae2c5e8780b330592b6de8494e779"
uuid = "69de0a69-1ddd-5017-9359-2bf0b02dc9f0"
version = "2.0.3"

[[deps.Printf]]
deps = ["Unicode"]
uuid = "de0858da-6303-5e67-8744-51eddeeeb8d7"

[[deps.Random]]
deps = ["Serialization"]
uuid = "9a3f8284-a2c9-5f02-9a11-845980a1fd5c"

[[deps.SHA]]
uuid = "ea8e919c-243c-51af-8825-aaa63cd721ce"

[[deps.Serialization]]
uuid = "9e88b42a-f829-5b0c-bbe9-9e923198166b"

[[deps.SparseArrays]]
deps = ["LinearAlgebra", "Random"]
uuid = "2f01184e-e22b-5df5-ae63-d93ebab69eaf"

[[deps.Statistics]]
deps = ["LinearAlgebra", "SparseArrays"]
uuid = "10745b16-79ce-11e8-11f9-7d13ad32a3b2"

[[deps.UUIDs]]
deps = ["Random", "SHA"]
uuid = "cf7118a7-6976-5b1a-9a39-7adc72f591a4"

[[deps.Unicode]]
uuid = "4ec0a83e-493e-50e2-b9ac-8f72acf5a8f5"

[[deps.libblastrampoline_jll]]
deps = ["Artifacts", "Libdl", "OpenBLAS_jll"]
uuid = "8e850b90-86db-534c-a0d3-1478176c7d93"
"""

# ╔═╡ Cell order:
# ╠═568f057a-126d-11ec-23cb-f98bea4a534f
# ╠═daad198c-10c8-4e4c-93c4-d330ab22f3dd
# ╠═2cca4797-d1ee-4c27-8243-736e3e468dd1
# ╠═6b82e993-2f3d-4d5c-8709-57050c7211de
# ╠═382a2b3a-4059-4cbe-8485-b0ecce99c451
# ╠═e59e2718-acc6-4a98-8ec9-61cf0a375f90
# ╠═f7acd079-f79b-4967-a9ee-fc4965e2a06c
# ╠═c118a05d-d1bb-4767-9f3a-0b5cefd69d47
# ╠═9d2617c5-ebf2-46c8-910f-190ba1d160ac
# ╠═078cb436-e238-4a69-bde6-156624db601b
# ╠═cea0b9f0-b908-4c33-8a5d-6a3019cfa47a
# ╠═07d10397-f053-45e0-ab2b-6565c18db5a2
# ╠═464e87db-a12f-4e8b-a03a-ae1f943a42d0
# ╠═e323b98a-47a7-4182-9892-4d0b1891e295
# ╠═82baf161-7a98-4bb5-a928-b2273e4360cb
# ╠═89196053-24db-4013-a1e3-3d3b22c4eedc
# ╠═c7667675-8018-40f5-a1d9-8756f29466e0
# ╠═ed4ded6b-925a-46e7-bcab-0cf0dc0fe80a
# ╠═fa4d516c-74ea-44cb-bc18-e2b6cde80515
# ╠═120de079-e8e5-40b3-9582-c3741cf024cb
# ╠═6ea414f8-d5bb-4432-9afb-6d2b2cfd1d01
# ╠═6d793a48-b48e-4547-ac87-c23a1b03de9c
# ╠═e0470dad-e1ab-4603-85d0-e165f80c2463
# ╠═c6a079d7-2773-41ba-81c8-773efaabd010
# ╠═61d320a0-2f4f-4cf4-b800-20bb77560c17
# ╠═27547863-22e1-466e-951e-2a5677bb9501
# ╠═2eb91ffc-799d-496e-8b50-6be2d497beaa
# ╠═5e201d20-3600-4b21-a764-8dd1e89cdf66
# ╠═6678078e-f30c-4e5e-8de5-f697d6c241fd
# ╠═c2c72029-ffd2-463c-8548-bbe306178bd1
# ╠═77f86b91-0ac4-4ba4-a687-0ea49a0ddd10
# ╠═314415de-ac90-479a-8665-fa9e51323740
# ╠═cea3d8d2-70e4-49c7-9698-d4085976e924
# ╠═fba39823-d264-4210-80c8-491eb19486d2
# ╟─00000000-0000-0000-0000-000000000001
# ╟─00000000-0000-0000-0000-000000000002
